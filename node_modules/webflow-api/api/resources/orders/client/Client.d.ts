/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Orders {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
/**
 * Orders are the orders for your Webflow site.
 */
export declare class Orders {
    protected readonly _options: Orders.Options;
    constructor(_options: Orders.Options);
    /**
     * List all orders created for a given site.
     *
     * Required scope | `ecommerce:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.OrdersListRequest} request
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, request?: Webflow.OrdersListRequest, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.OrderList>;
    private __list;
    /**
     * Retrieve a single product by its ID. All of its SKUs will also be
     * retrieved.
     *
     * Required scope | `ecommerce:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} orderId - Unique identifier for an Order
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.get("580e63e98c9a982ac9b8b741", "5e8518516e147040726cc415")
     */
    get(siteId: string, orderId: string, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.Order>;
    private __get;
    /**
     * This API lets you update the fields, `comment`, `shippingProvider`,
     * and/or `shippingTracking` for a given order. All three fields can be
     * updated simultaneously or independently.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} orderId - Unique identifier for an Order
     * @param {Webflow.OrdersUpdateRequest} request
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.update("580e63e98c9a982ac9b8b741", "5e8518516e147040726cc415")
     */
    update(siteId: string, orderId: string, request?: Webflow.OrdersUpdateRequest, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.Order>;
    private __update;
    /**
     * Updates an order's status to fulfilled
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} orderId - Unique identifier for an Order
     * @param {Webflow.OrdersUpdateFulfillRequest} request
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.updateFulfill("580e63e98c9a982ac9b8b741", "5e8518516e147040726cc415")
     */
    updateFulfill(siteId: string, orderId: string, request?: Webflow.OrdersUpdateFulfillRequest, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.Order>;
    private __updateFulfill;
    /**
     * Updates an order's status to unfulfilled
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} orderId - Unique identifier for an Order
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.updateUnfulfill("580e63e98c9a982ac9b8b741", "5e8518516e147040726cc415")
     */
    updateUnfulfill(siteId: string, orderId: string, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.Order>;
    private __updateUnfulfill;
    /**
     * This API will reverse a Stripe charge and refund an order back to a
     * customer. It will also set the order's status to `refunded`.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} orderId - Unique identifier for an Order
     * @param {Webflow.OrdersRefundRequest} request
     * @param {Orders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.orders.refund("580e63e98c9a982ac9b8b741", "5e8518516e147040726cc415")
     */
    refund(siteId: string, orderId: string, request?: Webflow.OrdersRefundRequest, requestOptions?: Orders.RequestOptions): core.HttpResponsePromise<Webflow.Order>;
    private __refund;
    protected _getAuthorizationHeader(): Promise<string>;
}
