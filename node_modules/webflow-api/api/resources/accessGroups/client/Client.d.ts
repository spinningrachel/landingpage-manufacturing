/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace AccessGroups {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class AccessGroups {
    protected readonly _options: AccessGroups.Options;
    constructor(_options: AccessGroups.Options);
    /**
     * Get a list of access groups for a site
     *
     * Required scope | `users:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.AccessGroupsListRequest} request
     * @param {AccessGroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.accessGroups.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, request?: Webflow.AccessGroupsListRequest, requestOptions?: AccessGroups.RequestOptions): core.HttpResponsePromise<Webflow.AccessGroupList>;
    private __list;
    protected _getAuthorizationHeader(): Promise<string>;
}
