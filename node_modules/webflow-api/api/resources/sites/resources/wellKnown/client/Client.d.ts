/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace WellKnown {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class WellKnown {
    protected readonly _options: WellKnown.Options;
    constructor(_options: WellKnown.Options);
    /**
     * Upload a supported well-known file to a site.
     *
     * The current restrictions on well-known files are as follows:
     *   - Each file must be smaller than 100kb
     *   - Less than 30 total files
     *   - Have one of the following file extensions (or no extension): `.txt`, `.json`, `.noext`
     *
     *   <Note title=".noext">
     *     `.noext` is a special file extension that removes other extensions. For example, `apple-app-site-association.noext.txt` will be uploaded as `apple-app-site-association`. Use this extension for tools that have trouble uploading extensionless files.
     *   </Note>
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `site_config:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.sites.WellKnownFile} request
     * @param {WellKnown.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.wellKnown.put("580e63e98c9a982ac9b8b741", {
     *         fileName: "fileName",
     *         fileData: "fileData"
     *     })
     */
    put(siteId: string, request: Webflow.sites.WellKnownFile, requestOptions?: WellKnown.RequestOptions): core.HttpResponsePromise<void>;
    private __put;
    /**
     * Delete existing well-known files from a site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `site_config:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.sites.WellKnownDeleteRequest} request
     * @param {WellKnown.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.wellKnown.delete("580e63e98c9a982ac9b8b741")
     */
    delete(siteId: string, request?: Webflow.sites.WellKnownDeleteRequest, requestOptions?: WellKnown.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string>;
}
