/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Forms {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
/**
 * Forms are forms that are created on your Webflow site.
 */
export declare class Forms {
    protected readonly _options: Forms.Options;
    constructor(_options: Forms.Options);
    /**
     * List forms for a given site.
     *
     * Required scope | `forms:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.FormsListRequest} request
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, request?: Webflow.FormsListRequest, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.FormList>;
    private __list;
    /**
     * Get information about a given form.
     *
     * Required scope | `forms:read`
     *
     * @param {string} formId - Unique identifier for a Form
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.get("580e63e98c9a982ac9b8b741")
     */
    get(formId: string, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.Form>;
    private __get;
    /**
     * List form submissions for a given form
     *
     * <Note title="Forms in components">
     *   When a form is used in a component definition, each instance of the form is considered a unique form.
     *
     *   To get a combined list of submissions for a form that appears across multiple component instances, use the [List Form Submissions by Site](/data/reference/forms/form-submissions/list-submissions-by-site) endpoint.
     * </Note>
     *
     * Required scope | `forms:read`
     *
     * @param {string} formId - Unique identifier for a Form
     * @param {Webflow.FormsListSubmissionsRequest} request
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.listSubmissions("580e63e98c9a982ac9b8b741")
     */
    listSubmissions(formId: string, request?: Webflow.FormsListSubmissionsRequest, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.FormSubmissionList>;
    private __listSubmissions;
    /**
     * Get information about a given form submissio.
     *
     * Required scope | `forms:read`
     *
     * @param {string} formSubmissionId - Unique identifier for a Form Submission
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.getSubmission("580e63e98c9a982ac9b8b741")
     */
    getSubmission(formSubmissionId: string, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.FormSubmission>;
    private __getSubmission;
    /**
     * Delete a form submission
     *
     *
     * Required scope | `forms:write`
     *
     * @param {string} formSubmissionId - Unique identifier for a Form Submission
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.deleteSubmission("580e63e98c9a982ac9b8b741")
     */
    deleteSubmission(formSubmissionId: string, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<void>;
    private __deleteSubmission;
    /**
     * Update hidden fields on a form submission
     *
     * Required scope | `forms:write`
     *
     * @param {string} formSubmissionId - Unique identifier for a Form Submission
     * @param {Webflow.FormsUpdateSubmissionRequest} request
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.updateSubmission("580e63e98c9a982ac9b8b741")
     */
    updateSubmission(formSubmissionId: string, request?: Webflow.FormsUpdateSubmissionRequest, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.FormSubmission>;
    private __updateSubmission;
    /**
     * List form submissions for a given site. This endpoint differs from the existing [List Form Submissions endpoint](/data/reference/forms/form-submissions/list-submissions) by accepting `siteId` as a path parameter and `elementId` as a query parameter. You can get the `elementId` from the [List forms endpoint](/data/reference/forms/forms/list).
     *
     *
     *
     * Required scope | `forms:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.FormsListSubmissionsBySiteRequest} request
     * @param {Forms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.forms.listSubmissionsBySite("580e63e98c9a982ac9b8b741", {
     *         elementId: "18259716-3e5a-646a-5f41-5dc4b9405aa0"
     *     })
     */
    listSubmissionsBySite(siteId: string, request?: Webflow.FormsListSubmissionsBySiteRequest, requestOptions?: Forms.RequestOptions): core.HttpResponsePromise<Webflow.FormSubmissionList>;
    private __listSubmissionsBySite;
    protected _getAuthorizationHeader(): Promise<string>;
}
