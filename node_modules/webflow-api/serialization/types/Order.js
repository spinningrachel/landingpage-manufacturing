"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = void 0;
const core = __importStar(require("../../core"));
const OrderStatus_1 = require("./OrderStatus");
const OrderDisputeLastStatus_1 = require("./OrderDisputeLastStatus");
const OrderPrice_1 = require("./OrderPrice");
const OrderAddress_1 = require("./OrderAddress");
const OrderShippingAddress_1 = require("./OrderShippingAddress");
const OrderBillingAddress_1 = require("./OrderBillingAddress");
const OrderCustomerInfo_1 = require("./OrderCustomerInfo");
const OrderPurchasedItem_1 = require("./OrderPurchasedItem");
const StripeDetails_1 = require("./StripeDetails");
const StripeCard_1 = require("./StripeCard");
const PaypalDetails_1 = require("./PaypalDetails");
const OrderMetadata_1 = require("./OrderMetadata");
const OrderTotals_1 = require("./OrderTotals");
const OrderDownloadFilesItem_1 = require("./OrderDownloadFilesItem");
exports.Order = core.serialization.object({
    orderId: core.serialization.string().optional(),
    status: OrderStatus_1.OrderStatus.optional(),
    comment: core.serialization.string().optional(),
    orderComment: core.serialization.string().optional(),
    acceptedOn: core.serialization.date().optional(),
    fulfilledOn: core.serialization.date().optional(),
    refundedOn: core.serialization.date().optional(),
    disputedOn: core.serialization.date().optional(),
    disputeUpdatedOn: core.serialization.date().optional(),
    disputeLastStatus: OrderDisputeLastStatus_1.OrderDisputeLastStatus.optional(),
    customerPaid: OrderPrice_1.OrderPrice.optional(),
    netAmount: OrderPrice_1.OrderPrice.optional(),
    applicationFee: OrderPrice_1.OrderPrice.optional(),
    allAddresses: core.serialization.list(OrderAddress_1.OrderAddress).optional(),
    shippingAddress: OrderShippingAddress_1.OrderShippingAddress.optional(),
    billingAddress: OrderBillingAddress_1.OrderBillingAddress.optional(),
    shippingProvider: core.serialization.string().optional(),
    shippingTracking: core.serialization.string().optional(),
    shippingTrackingUrl: core.serialization.property("shippingTrackingURL", core.serialization.string().optional()),
    customerInfo: OrderCustomerInfo_1.OrderCustomerInfo.optional(),
    purchasedItems: core.serialization.list(OrderPurchasedItem_1.OrderPurchasedItem).optional(),
    purchasedItemsCount: core.serialization.number().optional(),
    stripeDetails: StripeDetails_1.StripeDetails.optional(),
    stripeCard: StripeCard_1.StripeCard.optional(),
    paypalDetails: PaypalDetails_1.PaypalDetails.optional(),
    customData: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.unknown()))
        .optional(),
    metadata: OrderMetadata_1.OrderMetadata.optional(),
    isCustomerDeleted: core.serialization.boolean().optional(),
    isShippingRequired: core.serialization.boolean().optional(),
    hasDownloads: core.serialization.boolean().optional(),
    paymentProcessor: core.serialization.string().optional(),
    totals: OrderTotals_1.OrderTotals.optional(),
    downloadFiles: core.serialization.list(OrderDownloadFilesItem_1.OrderDownloadFilesItem).optional(),
});
