import * as Webflow from "../api";
import { Assets } from "../api/resources/assets/client/Client";
import * as core from "../core";
import * as environments from "../environments";
export declare namespace AssetsUtilities {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
interface TestAssetUploadRequest {
    /**
     * File to upload via URL where the asset is hosted, or by ArrayBuffer
     */
    file: ArrayBuffer | string;
    /**
     * Name of the file to upload, including the extension
     */
    fileName: string;
    /**
     * Name of the parent folder to upload to
     */
    parentFolder?: string;
}
export declare class Client extends Assets {
    protected readonly _options: AssetsUtilities.Options;
    constructor(_options: AssetsUtilities.Options);
    private _getBufferFromUrl;
    /**
     * Create the Asset metadata in Webflow, and immediately upload it to the S3 bucket on behalf of the user to simplify the 2-step process
     *
     * @param siteId
     * @param request
     * @param requestOptions
     * @returns
     */
    createAndUpload(siteId: string, request: TestAssetUploadRequest, requestOptions?: Assets.RequestOptions): Promise<Webflow.AssetUpload>;
}
export {};
