/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace Scripts {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Scripts {
    protected readonly _options: Scripts.Options;
    constructor(_options: Scripts.Options);
    /**
     * Get all scripts applied to a page.
     *
     * Required scope | `custom_code:read`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Scripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.scripts.getCustomCode("63c720f9347c2139b248e552")
     */
    getCustomCode(pageId: string, requestOptions?: Scripts.RequestOptions): core.HttpResponsePromise<Webflow.ScriptApplyList>;
    private __getCustomCode;
    /**
     * Apply scripts to a page.
     *
     * <Note title="Script Registration">
     *   To apply a script to a page, the script must first be registered to a Site via the [Register Script](/data/reference/custom-code/custom-code/register-hosted) endpoints. Once registered, the script can be applied to a Site or Page using the appropriate endpoints. See the documentation on [working with Custom Code](/data/docs/custom-code) for more information.
     * </Note>
     *
     * Required scope | `custom_code:write`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Webflow.ScriptApplyList} request
     * @param {Scripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.scripts.upsertCustomCode("63c720f9347c2139b248e552", {
     *         scripts: [{
     *                 id: "cms_slider",
     *                 location: "header",
     *                 version: "1.0.0",
     *                 attributes: {
     *                     "my-attribute": "some-value"
     *                 }
     *             }, {
     *                 id: "alert",
     *                 location: "header",
     *                 version: "0.0.1"
     *             }]
     *     })
     */
    upsertCustomCode(pageId: string, request: Webflow.ScriptApplyList, requestOptions?: Scripts.RequestOptions): core.HttpResponsePromise<Webflow.ScriptApplyList>;
    private __upsertCustomCode;
    /**
     * Delete a custom code block that the App created on a page.
     *
     * <Note>Access to this endpoint requires a bearer token from a [Data Client App](/data/docs/getting-started-data-clients).</Note>
     *
     * Required scope | `custom_code:write`
     *
     * @param {string} pageId - Unique identifier for a Page
     * @param {Scripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.pages.scripts.deleteCustomCode("63c720f9347c2139b248e552")
     */
    deleteCustomCode(pageId: string, requestOptions?: Scripts.RequestOptions): core.HttpResponsePromise<void>;
    private __deleteCustomCode;
    protected _getAuthorizationHeader(): Promise<string>;
}
