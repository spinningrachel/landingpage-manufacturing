/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Inventory {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
/**
 * Inventory is the stock of e-commerce items in your Webflow site.
 */
export declare class Inventory {
    protected readonly _options: Inventory.Options;
    constructor(_options: Inventory.Options);
    /**
     * List the current inventory levels for a particular SKU item.
     *
     * Required scope | `ecommerce:read`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.inventory.list("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754")
     */
    list(collectionId: string, itemId: string, requestOptions?: Inventory.RequestOptions): core.HttpResponsePromise<Webflow.InventoryItem>;
    private __list;
    /**
     * Updates the current inventory levels for a particular SKU item.
     *
     * Updates may be given in one or two methods, absolutely or incrementally.
     * - Absolute updates are done by setting `quantity` directly.
     * - Incremental updates are by specifying the inventory delta in `updateQuantity` which is then added to the `quantity` stored on the server.
     *
     * Required scope | `ecommerce:write`
     *
     * @param {string} collectionId - Unique identifier for a Collection
     * @param {string} itemId - Unique identifier for an Item
     * @param {Webflow.InventoryUpdateRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.inventory.update("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754", {
     *         inventoryType: "infinite"
     *     })
     */
    update(collectionId: string, itemId: string, request: Webflow.InventoryUpdateRequest, requestOptions?: Inventory.RequestOptions): core.HttpResponsePromise<Webflow.InventoryItem>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string>;
}
