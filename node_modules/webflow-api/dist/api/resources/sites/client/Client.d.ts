/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
import { Redirects } from "../resources/redirects/client/Client";
import { Plans } from "../resources/plans/client/Client";
import { RobotsTxt } from "../resources/robotsTxt/client/Client";
import { WellKnown } from "../resources/wellKnown/client/Client";
import { ActivityLogs } from "../resources/activityLogs/client/Client";
import { Comments } from "../resources/comments/client/Client";
import { Scripts } from "../resources/scripts/client/Client";
export declare namespace Sites {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
/**
 * Sites are the sites in your Webflow workspace.
 */
export declare class Sites {
    protected readonly _options: Sites.Options;
    protected _redirects: Redirects | undefined;
    protected _plans: Plans | undefined;
    protected _robotsTxt: RobotsTxt | undefined;
    protected _wellKnown: WellKnown | undefined;
    protected _activityLogs: ActivityLogs | undefined;
    protected _comments: Comments | undefined;
    protected _scripts: Scripts | undefined;
    constructor(_options: Sites.Options);
    get redirects(): Redirects;
    get plans(): Plans;
    get robotsTxt(): RobotsTxt;
    get wellKnown(): WellKnown;
    get activityLogs(): ActivityLogs;
    get comments(): Comments;
    get scripts(): Scripts;
    /**
     * Create a site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope | `workspace:write`
     *
     * @param {string} workspaceId - Unique identifier for a Workspace
     * @param {Webflow.SitesCreateRequest} request
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.create("580e63e98c9a982ac9b8b741", {
     *         name: "The Hitchhiker's Guide to the Galaxy"
     *     })
     */
    create(workspaceId: string, request: Webflow.SitesCreateRequest, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.Site>;
    private __create;
    /**
     * List of all sites the provided access token is able to access.
     *
     * Required scope | `sites:read`
     *
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     *
     * @example
     *     await client.sites.list()
     */
    list(requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.Sites>;
    private __list;
    /**
     * Get details of a site.
     *
     * Required scope | `sites:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.get("580e63e98c9a982ac9b8b741")
     */
    get(siteId: string, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.Site>;
    private __get;
    /**
     * Delete a site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope | `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.delete("580e63e98c9a982ac9b8b741")
     */
    delete(siteId: string, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    /**
     * Update a site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope | `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.SitesUpdateRequest} request
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.update("580e63e98c9a982ac9b8b741")
     */
    update(siteId: string, request?: Webflow.SitesUpdateRequest, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.Site>;
    private __update;
    /**
     * Get a list of all custom domains related to site.
     *
     * Required scope | `sites:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.getCustomDomain("580e63e98c9a982ac9b8b741")
     */
    getCustomDomain(siteId: string, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.Domains>;
    private __getCustomDomain;
    /**
     * Publishes a site to one or more more domains.
     *
     * To publish to a specific custom domain, use the domain IDs from the [Get Custom Domains](/data/reference/sites/get-custom-domain) endpoint.
     *
     * <Note title="Rate limit: 1 publish per minute">This endpoint has a specific rate limit of one successful publish queue per minute.</Note>
     *
     * Required scope | `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.SitesPublishRequest} request
     * @param {Sites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     *
     * @example
     *     await client.sites.publish("580e63e98c9a982ac9b8b741", {
     *         customDomains: ["660c6449dd97ebc7346ac629", "660c6449dd97ebc7346ac62f"],
     *         publishToWebflowSubdomain: false
     *     })
     */
    publish(siteId: string, request?: Webflow.SitesPublishRequest, requestOptions?: Sites.RequestOptions): core.HttpResponsePromise<Webflow.SitesPublishResponse>;
    private __publish;
    protected _getAuthorizationHeader(): Promise<string>;
}
