/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace Plans {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Plans {
    protected readonly _options: Plans.Options;
    constructor(_options: Plans.Options);
    /**
     * Get site plan details for the specified Site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope | `sites:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Plans.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.plans.getSitePlan("580e63e98c9a982ac9b8b741")
     */
    getSitePlan(siteId: string, requestOptions?: Plans.RequestOptions): core.HttpResponsePromise<Webflow.SitePlan>;
    private __getSitePlan;
    protected _getAuthorizationHeader(): Promise<string>;
}
