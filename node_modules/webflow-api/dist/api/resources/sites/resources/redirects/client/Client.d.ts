/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Webflow from "../../../../../index";
export declare namespace Redirects {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | environments.WebflowEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        accessToken: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Redirects {
    protected readonly _options: Redirects.Options;
    constructor(_options: Redirects.Options);
    /**
     * Fetch a list of all 301 redirect rules configured for a specific site.
     *
     * Use this endpoint to review, audit, or manage the redirection rules that control how traffic is rerouted on your site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `sites:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Redirects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.redirects.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, requestOptions?: Redirects.RequestOptions): core.HttpResponsePromise<Webflow.Redirects>;
    private __list;
    /**
     * Add a new 301 redirection rule to a site.
     *
     * This endpoint allows you to define a source path (`fromUrl`) and its corresponding destination path (`toUrl`), which will dictate how traffic is rerouted on your site. This is useful for managing site changes, restructuring URLs, or handling outdated links.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.Redirect} request
     * @param {Redirects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.redirects.create("580e63e98c9a982ac9b8b741", {
     *         id: "42e1a2b7aa1a13f768a0042a",
     *         fromUrl: "/mostly-harmless",
     *         toUrl: "/earth"
     *     })
     */
    create(siteId: string, request: Webflow.Redirect, requestOptions?: Redirects.RequestOptions): core.HttpResponsePromise<Webflow.Redirect>;
    private __create;
    /**
     * Remove a 301 redirection rule from a site.
     *
     * This is useful for cleaning up outdated or unnecessary redirects, ensuring that your site's routing behavior remains efficient and up-to-date.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} redirectId - Unique identifier site rediect
     * @param {Redirects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.redirects.delete("580e63e98c9a982ac9b8b741", "66c4cb9a20cac35ed19500e6")
     */
    delete(siteId: string, redirectId: string, requestOptions?: Redirects.RequestOptions): core.HttpResponsePromise<Webflow.Redirects>;
    private __delete;
    /**
     * Update a 301 redirection rule from a site.
     *
     * <Warning title="Enterprise Only">This endpoint requires an Enterprise workspace.</Warning>
     *
     * Required scope: `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} redirectId - Unique identifier site rediect
     * @param {Webflow.Redirect} request
     * @param {Redirects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.sites.redirects.update("580e63e98c9a982ac9b8b741", "66c4cb9a20cac35ed19500e6", {
     *         id: "42e1a2b7aa1a13f768a0042a",
     *         fromUrl: "/mostly-harmless",
     *         toUrl: "/earth"
     *     })
     */
    update(siteId: string, redirectId: string, request: Webflow.Redirect, requestOptions?: Redirects.RequestOptions): core.HttpResponsePromise<Webflow.Redirect>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string>;
}
